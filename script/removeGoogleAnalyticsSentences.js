/**
 * To set up JavaScript Transformation open configuration space properties
 * and go to "Configuration Space" -> "Transformation Configuration"
 * and add a JavaScript Transformation Module with this JavaScript.
 */

/**
 * Transformation module instance
 */
var pv_module = module_instance();
var inpath;
var outpath;
var fo;
var File = java.io.File;
var FileReader = java.io.FileReader;
var BufferedReader = java.io.BufferedReader;
var FileWriter = java.io.FileWriter;
var BufferedWriter = java.io.BufferedWriter;

function init(vdm, models, variables, parameter) {
	// initialize global variables
	gvdm = vdm;

	//get output path
	inpath = variables.get("INPUT");
	outpath = variables.get("OUTPUT");
	// if no error occurred return OK status
	var status = new ClientTransformStatus();
	status.setMessage(Constants().EMPTY_STRING);
	status.setStatus(ClientTransformStatus().OK);

	return status;
}

/**
 * Do the work of this JavaScript transformation module
 * @return {ClientTransformStatus} the status of this module method
 */

function work() {
	var status = new ClientTransformStatus();
	status.setMessage(Constants().EMPTY_STRING);
	status.setStatus(ClientTransformStatus().OK);
	try {
		var filename = "console.java";
		fo = new java.io.FileWriter(new java.io.File(pv_module.getOutput(), filename));
		var models = pv_module.getModels();
		for (var index = 0;index < models.length; index++) {
			var model = new IPVModel(models[index]);
			// we only want to process the Family Model
			if (model.getType().equals(ModelConstants().CCM_TYPE)) {
				processFamilyModel(model);
			}
		}
	} catch (e) {
		// If something went wrong, catch error and return error status with
		// specific error message.
		status.setMessage(e.toString());
		status.setStatus(ClientTransformStatus().ERROR);
	}
	// if no error occurred return OK status
	return status;
}

/**
 * Iterates each element of the family model to find ps:pvscltext type files and process them
 * @param {IPVElement} element The feature
 */
function processFamilyModel(model) {

	//iterate all elements of the model
	var idx = model.getElementList().iterator();
	while (idx.hasNext() == true) {
		var element = idx.next();
		if (element.getType() == "ps:pvscltext") {
			var fileName = element.getPropertyWithName("file").getFirstConstant().getValue();
			var parentPath = element.getParent().getParent().getPropertyWithName("dir").getFirstConstant().getValue();
			var fullPath = inpath + "/" + parentPath
			fo.append(fullPath + "/" + fileName +"\n");
			modifyFile(fullPath, fileName);
		}
	}
	fo.close();
}

function modifyFile(path, fileName) {
	try {
		var outFile = new File(path, fileName);
		var variantIndex = -1;
		if (outFile.exists() == false) {
			outFile.createNewFile();
		}

		var inFile = new File(path, fileName);
		var reader = new BufferedReader(new FileReader(inFile));
		var inLine = reader.readLine();
		var fileContent = ''
		while (inLine != null) {
			// filter ga sentences from the new content of the file
			if (!inLine.contains("// generated by script")) {
				fileContent = fileContent.concat(inLine + "\n")	
			}
			inLine = reader.readLine();
		}
		fo.append(fileContent + "\n");
		// overwrite the file without ga sentences
		var writer = new BufferedWriter(new FileWriter(outFile));
		writer.write(fileContent);
		writer.flush();
		writer.close();
		reader.close();
	} catch (e) {
		fo.append(e.getMessage());
		fo.close;
	}


}